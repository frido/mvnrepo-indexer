package frido.mvnrepo.indexer;

import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;

import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App2 implements MatchHandler {

    Logger log = LoggerFactory.getLogger(App.class);
    
    private static final String ENV_MONGO_URL = "MONGO_URL";
    
    private Mongo mongo;

    private Set<String> projectLinks = new HashSet<String>();

    //TODO: file properties, env, params?
    private Map<String, String> getProperties(){
        Map<String, String> env = System.getenv();
        return env;
    }

    public App2(){
        String connectionString = getProperties().get(ENV_MONGO_URL);
        this.mongo = new Mongo(connectionString);
    }

    /** 
     * Run main application.
     */
    public static void main(String[] args) {
        App2 app = new App2();
        app.run();
    }

    static int counter = 0;
    public void run(){
        Crawler crawler = new Crawler(".pom", this);
        this.mongo.getAll("metadata").forEach(doc -> {
            //log.info("doc: " + doc);
            if(counter< 100) {
                //log.info((counter++) + "link:" + generateLink(doc));
                try {
					crawler.search(generateLink(doc), 0);
				} catch (Exception e) {
					log.error(e.getMessage());
				}
            }
        });
    }

    private String generateLink(Document doc) throws Exception { //TODO: input groupId, arch... instead of Document
        String groupId = doc.getString("groupId");
        String artifactId = doc.getString("artifactId");
        String version = doc.getString("version");
        if(groupId == null || artifactId == null || version == null){
            throw new Exception("Wrong metadata: " + doc);
        }
        return "http://central.maven.org/maven2/" + groupId.replace(".", "/") + "/" + artifactId + "/" + version + "/" + artifactId + "-" + version + ".pom";
	}

	@Override
    public void match(String content){
        //Document doc = Metadata.valueOf(content);
        //log.info("match({})", content);
        PomToJson converter = new PomToJson();
        Document json = converter.toJsonMain(content); // TODO: better function name7
        String url = json.getString("Url");
        if (url != null) {
            log.info(".........: " + url + " -> " + json.getString("Id"));
        }
        //this.mongo.save("metadata", doc);
    }
}
